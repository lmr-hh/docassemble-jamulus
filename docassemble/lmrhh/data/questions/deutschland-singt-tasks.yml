---
# Sets a variable in the interview. This is used in the context of a
# background_action_response.
event: set_variable
code: |
  for name, value in action_arguments().items():
    define(name, value)
  background_response()
---
# The member_data forms is the data that is available to be put in spreadsheets.
# The dictionary keys are compared to spreadsheet headings. The comparison is
# case-insensitive.
code: |
  member_data = {
    "Vorname": person.name.first,
    "Nachname": person.name.last,
    "E-Mail": person.email,
    "Telefonnummer": person.phone_number,
    "Adresse": adresse(person),
    "Anmeldedatum": current_datetime(timezone="Europe/Berlin").format_datetime('d.M.YYYY HH:mm'),
    "Probentermine": ', '.join(probentermine.true_values())
  }
---
# A task that adds a row to the Anmeldungen.
need: msgraph
code: |
  save_data_task = background_action(
    'append_to_table',
    'refresh',
    test_variable='test_anmeldungen_tabelle',
    drive=daten["Anmeldungen"]["Bibliothek"],
    file=daten["Anmeldungen"]["Dokument"],
    table=daten["Anmeldungen"]["Tabelle"]
  )
---
# This action saves member_data to a spreadsheet configured via action arguments.
# All arguments are required.
# - spreadsheet: This argument provides the spreadsheet ID
# - range: This argument provides the range in the spreadsheet where the data
#          should be inserted.
# - test_variable: This argument provides the variable to fill in test mode.
event: append_to_table
need: msgraph
code: |
  background = interface() in {"worker", "cron"}
  if testmodus and background:
    background_response_action(
      'set_variable',
      **{action_argument('test_variable'): {
        "file": table_doc_info,
        "table": msgraph.get_table(
          action_argument('drive'),
          action_argument('file'),
          action_argument('table')
        ).json()
      }}
    )
  else:
    something = msgraph.get(f"drives/{action_argument('drive')}/items/{action_argument('file')}/workbook/"
                f"tables/{action_argument('table')}/headerRowRange").json()
    print(f"drives/{action_argument('drive')}/items/{action_argument('file')}/workbook/"
                          f"tables/{action_argument('table')}/headerRowRange")
    print("------------------------DEBUG------------------------------")
    print(something)
    result = msgraph.add_table_data(
      action_argument('drive'),
      action_argument('file'),
      action_argument('table'),
      member_data
    ).json()
    if background:
      background_response(result)
    else:
      json_response(result)
---

---
# Sends an email to the registered email address
need: mailgun
code: member_email_task = background_action('send_member_email', 'refresh')
---
# Sends an email to the registered email address.
event: send_member_email
need: mailgun
code: |
  background = interface() in {"worker", "cron"}
  if testmodus and background:
    result = True
  else:
    result = mailgun.send_email(
        to=[person],
        template=person_email
    )
  if background:
    background_response(result)
  else:
    json_response(result)
---

---
# Sends an email to the notification addresses.
need: mailgun
code: orga_email_task = background_action('send_orga_email', 'refresh')
---
# Sends an email to the notification addresses.
event: send_orga_email
need: mailgun
code: |
  background = interface() in {"worker", "cron"}
  recipients = daten["E-Mail Benachrichtigung"]
  if isinstance(recipients, str):
    recipients = [recipients]
  if (testmodus and background) or (not testmodus and not recipients):
    result = True
  else:
    to = [person] if testmodus else recipients
    result = mailgun.send_email(
      to=to,
      template=orga_email
    )
  if background:
    background_response(result)
  else:
    json_response(result)
---
