---
# Sets a variable in the interview. This is used in the context of a
# background_action_response.
event: set_variable
code: |
  for name, value in action_arguments().items():
    define(name, value)
  background_response()
---
# The member_data forms is the data that is available to be put in spreadsheets.
# The dictionary keys are compared to spreadsheet headings. The comparison is
# case-insensitive.
code: |
  member_data = {
    "Organisation": person.organisation,
    "TÃ¤tigkeit": person.position,
    "Vorname": person.name.first,
    "Nachname": person.name.last,
    "E-Mail": person.email,
    "Telefonnummer": person.phone_number,
    "Adresse": adresse(person),
    "Newsletter": bedingungen.newsletter,
    "Anmeldedatum": current_datetime(timezone="Europe/Berlin").format_datetime('d.M.YYYY HH:mm'),
    "Rechnungsnummer": rechnungsnummer,
  }
  member_data.update({v: value(v) for (k,v) in webinare.items()})
---
# A task that adds a row to the Anmeldungen.
need: rechnungsnummer
code: |
  save_data_task = background_action(
    'append_to_spreadsheet',
    'refresh',
    test_variable='test_anmeldungen_tabelle',
    spreadsheet=daten["Anmeldungen"]["Tabelle"],
    range=daten["Anmeldungen"]["Bereich"]
  )
---
# This action saves member_data to a spreadsheet configured via action arguments.
# All arguments are required.
# - spreadsheet: This argument provides the spreadsheet ID
# - range: This argument provides the range in the spreadsheet where the data
#          should be inserted.
# - test_variable: This argument provides the variable to fill in test mode.
event: append_to_spreadsheet
need: rechnungsnummer
code: |
  background = interface() in {"worker", "cron"}
  if testmodus and background:
    background_response_action(
      'set_variable',
      **{action_argument('test_variable'): get_file_meta(
        action_argument('spreadsheet'),
        mode="spreadsheet",
        range=action_argument('range')
      )}
    )
  else:
    result = add_spreadsheet_row(
      action_argument('spreadsheet'),
      action_argument('range'),
      member_data
    )
    if background:
      background_response(result)
    else:
      json_response(result)
---

---
# A task that assembles the registration PDF.
code: anmeldung_task = background_action('assemble_anmeldung', 'refresh')
---
# Assembles the registration pdf.
event: assemble_anmeldung
code: |
  background_response_action(
    'set_variable',
    anmeldung=anmeldeformular
  )
---

---
# A task that archives the registration PDF to a folder.
need: anmeldung
code: archive_registration_task = background_action('archive_registration', 'refresh')
---
# Archives the registration PDF to a folder. This action does not receive
# arguments.
event: archive_registration
need: anmeldung
code: |
  background = interface() in {"worker", "cron"}
  if testmodus and background:
    background_response_action(
      'set_variable',
      test_archiv_ordner=get_file_meta(daten["Archivordner-ID"])
    )
  else:
    result = upload_file(anmeldung.pdf, daten["Archivordner-ID"])
    if background:
      background_response(result)
    else:
      json_response(result)
---

---
# A task that archives the invoice PDF to a folder.
need: [rechnungsnummer, rechnung]
code: archive_invoice_task = background_action('archive_invoice', 'refresh')
---
# Archives the invoice PDF to a folder. This action does not receive
# arguments.
event: archive_invoice
need: [rechnungsnummer, rechnung]
code: |
  background = interface() in {"worker", "cron"}
  if testmodus and background:
    background_response_action(
      'set_variable',
      test_archiv_ordner=get_file_meta(daten["Archivordner-ID"])
    )
  else:
    result = upload_file(rechnung.pdf, daten["Archivordner-ID"])
    if background:
      background_response(result)
    else:
      json_response(result)
---

---
# Sends an email to the registered email address
need: [rechnungsnummer, anmeldung, rechnung]
code: member_email_task = background_action('send_member_email', 'refresh')
---
# Sends an email to the registered email address.
event: send_member_email
need: [rechnungsnummer, anmeldung, rechnung]
code: |
  background = interface() in {"worker", "cron"}
  if testmodus and background:
    result = True
  else:
    result = send_lmr_email(
        to=[person],
        template=person_email,
        attachments=[anmeldung.pdf, rechnung.pdf]
    )
  if background:
    background_response(result)
  else:
    json_response(result)
---

---
# Sends an email to the notification addresses.
need: [rechnungsnummer, anmeldung, rechnung]
code: orga_email_task = background_action('send_orga_email', 'refresh')
---
# Sends an email to the notification addresses.
event: send_orga_email
need: [rechnungsnummer, anmeldung, rechnung]
code: |
  background = interface() in {"worker", "cron"}
  recipients = daten["E-Mail Benachrichtigung"]
  if isinstance(recipients, str):
    recipients = [recipients]
  if (testmodus and background) or (not testmodus and not recipients):
    result = True
  else:
    to = [person] if testmodus else recipients
    result = send_lmr_email(
      to=to,
      template=orga_email,
      attachments=[anmeldung.pdf, rechnung.pdf]
    )
  if background:
    background_response(result)
  else:
    json_response(result)
---
